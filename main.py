import asyncio
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import random

TOKEN = "8485294244:AAEE1ZuJhk6QfgjFVP6XO8Iibh52WrK-7n8"  # ‚Üê –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù
ADMIN_IDS = {5083696616}  # <-- —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–∏ Telegram ID –∞–¥–º–∏–Ω–æ–≤ (—á–∏—Å–ª–∞ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫)

games = {}
known_users = set()        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–∞–ø–∏—Å–∞–≤—à–∏–µ /start –≤ –õ–°
active_chats = set()       # —á–∞—Ç—ã, –≥–¥–µ –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–ª—Å—è

# ===== –ö–æ–º–∞–Ω–¥—ã =====

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    known_users.add(user_id)
    await update.message.reply_text("‚úÖ –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–∞—Ö! –í–µ—Ä–Ω–∏—Å—å –≤ –≥—Ä—É–ø–ø—É –∏ –∂–º–∏ /startgame.")

async def startgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    active_chats.add(chat_id)

    game = games.get(chat_id, {"players": set(), "spy": None, "votes": {}, "task": None})
    players = list(game["players"])

    if len(players) < 3:
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –∏–≥—Ä–æ–∫–∞.")
        return

    not_ready = [uid for uid in players if uid not in known_users]
    if not_ready:
        text = "‚ùó –≠—Ç–∏ –∏–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –±–æ—Ç—É –≤ –õ–° (–Ω–∞–ø–∏—à–∏—Ç–µ /start):\n"
        for uid in not_ready:
            text += f"‚Ä¢ [–∏–≥—Ä–æ–∫](tg://user?id={uid})\n"
        await update.message.reply_text(text, parse_mode="Markdown")
        return

    spy = random.choice(players)

    for uid in players:
        try:
            if uid == spy:
                await context.bot.send_message(uid, "üïµÔ∏è –¢—ã —à–ø–∏–æ–Ω! –ü–æ–ø—Ä–æ–±—É–π –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—Ç–Ω—ã–º.")
            else:
                await context.bot.send_message(uid, "–í—ã ‚Äî –æ–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫.")
        except:
            await update.message.reply_text("‚ùó –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –Ω–∞—á–∞–ª–∏ —á–∞—Ç —Å –±–æ—Ç–æ–º.")
            return

    game["spy"] = spy
    game["votes"] = {}
    if game.get("task"):
        game["task"].cancel()
    game["task"] = context.application.create_task(game_timer(chat_id, context))
    games[chat_id] = game

    await update.message.reply_text(
        "üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –û–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ ‚Äî —à–ø–∏–æ–Ω.\n"
        "–ì–æ–ª–æ—Å—É–π—Ç–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /vote @username.\n"
        "–ò–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç."
    )

async def vote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    active_chats.add(chat_id)

    game = games.get(chat_id)
    if not game or not game.get("spy"):
        await update.message.reply_text("‚ùå –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    voter_id = update.effective_user.id
    if voter_id in game["votes"]:
        await update.message.reply_text("‚õî –í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏.")
        return

    if len(context.args) != 1 or not context.args[0].startswith("@"):
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /vote @username")
        return

    voted_username = context.args[0][1:]
    user_found = None
    for user_id in game["players"]:
        try:
            member = await context.bot.get_chat_member(chat_id, user_id)
            if member.user.username and member.user.username.lower() == voted_username.lower():
                user_found = user_id
                break
        except:
            continue

    if not user_found:
        await update.message.reply_text("‚ùå –ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    game["votes"][voter_id] = user_found
    await update.message.reply_text(f"‚úÖ –ì–æ–ª–æ—Å –∑–∞ @{voted_username} –ø—Ä–∏–Ω—è—Ç.")

async def show_vote_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await show_vote_stats(chat_id, context)

async def show_vote_stats(chat_id, context: ContextTypes.DEFAULT_TYPE):
    game = games.get(chat_id)
    if not game:
        return

    vote_counts = {}
    for voted_id in game["votes"].values():
        vote_counts[voted_id] = vote_counts.get(voted_id, 0) + 1

    if not vote_counts:
        await context.bot.send_message(chat_id, "–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª.")
        return

    text = "üìä –¢–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞:\n"
    for uid, count in sorted(vote_counts.items(), key=lambda x: -x[1]):
        try:
            member = await context.bot.get_chat_member(chat_id, uid)
            name = f"@{member.user.username}" if member.user.username else member.user.full_name
            text += f"‚Ä¢ {name}: {count} –≥–æ–ª–æ—Å(–æ–≤)\n"
        except:
            continue

    await context.bot.send_message(chat_id, text)

async def endgame(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    await endgame_auto(chat_id, context)

async def endgame_auto(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    game = games.get(chat_id)
    if not game or not game.get("spy"):
        await context.bot.send_message(chat_id, "‚ö†Ô∏è –ò–≥—Ä–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞.")
        return

    spy = game["spy"]
    votes = game["votes"]

    vote_counts = {}
    for v in votes.values():
        vote_counts[v] = vote_counts.get(v, 0) + 1

    max_votes = max(vote_counts.values()) if vote_counts else 0
    top_voted = [uid for uid, count in vote_counts.items() if count == max_votes]
    spy_caught = spy in top_voted

    spy_user = await context.bot.get_chat_member(chat_id, spy)
    result = "üéâ –®–ø–∏–æ–Ω –ø–æ–π–º–∞–Ω!" if spy_caught else "üïµÔ∏è –®–ø–∏–æ–Ω –Ω–µ –ø–æ–π–º–∞–Ω."

    await context.bot.send_message(chat_id, f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–®–ø–∏–æ–Ω–æ–º –±—ã–ª @{spy_user.user.username}.\n{result}")
    await show_vote_stats(chat_id, context)

    if game.get("task"):
        game["task"].cancel()
    games.pop(chat_id, None)

async def game_timer(chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(10 * 60)
    await context.bot.send_message(chat_id, "‚åõ –û—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç!")
    await asyncio.sleep(5 * 60)
    await endgame_auto(chat_id, context)

async def track_players(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    active_chats.add(chat_id)

    game = games.get(chat_id, {"players": set(), "spy": None, "votes": {}, "task": None})
    game["players"].add(user_id)
    games[chat_id] = game

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    active_chats.add(update.effective_chat.id)
    await update.message.reply_text(
        "/start ‚Äî –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è –≤ –õ–°\n"
        "/startgame ‚Äî –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
        "/vote @username ‚Äî –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞—Ç—å\n"
        "/votestats ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –≥–æ–ª–æ—Å–∞\n"
        "/endgame ‚Äî –¥–æ—Å—Ä–æ—á–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã"
    )

# ===== –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å =====

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1 or context.args[0] != "popopopo":
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á.")
        return

    await update.message.reply_text(
        "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–Ω–∞.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π:\n"
        "/broadcast <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã"
    )

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in ADMIN_IDS:
        return

    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /broadcast <—Ç–µ–∫—Å—Ç>")
        return

    text = " ".join(context.args)
    success, failed = 0, 0

    for chat_id in active_chats:
        try:
            await context.bot.send_message(chat_id, text)
            success += 1
        except:
            failed += 1

    await update.message.reply_text(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}, –æ—à–∏–±–æ–∫: {failed}")

# ===== –ó–∞–ø—É—Å–∫ =====

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("startgame", startgame))
    app.add_handler(CommandHandler("vote", vote))
    app.add_handler(CommandHandler("votestats", show_vote_stats_command))
    app.add_handler(CommandHandler("endgame", endgame))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("adminpanel", admin_panel))
    app.add_handler(CommandHandler("broadcast", broadcast))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), track_players))

    print("ü§ñ Bot started.")
    app.run_polling()
    
